#!/bin/bash

### START OF CODE GENERATED BY Argbash v2.6.1 ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

_positionals=()

print_help ()
{
	printf 'Usage: %s <pem> <tunnel-user> <tunnel-ip> <destination-user> <destination-ip>\n' "$0"
	printf '\t%s\n' "<pem>: Path to pem"
	printf '\t%s\n' "<tunnel-user>: Tunnel User"
	printf '\t%s\n' "<tunnel-ip>: Tunnel IP"
	printf '\t%s\n' "<destination-user>: Destination User"
	printf '\t%s\n' "<destination-ip>: Destination IP"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_positionals+=("$1")
		shift
	done
}


handle_passed_args_count ()
{
	_required_args_string="'pem', 'tunnel-user', 'tunnel-ip', 'destination-user' and 'destination-ip'"
	test ${#_positionals[@]} -ge 5 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 5 (namely: $_required_args_string), but got only ${#_positionals[@]}." 1
	test ${#_positionals[@]} -le 5 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 5 (namely: $_required_args_string), but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
}

assign_positional_args ()
{
	_positional_names=('_arg_pem' '_arg_tunnel_user' '_arg_tunnel_ip' '_arg_destination_user' '_arg_destination_ip' )

	for (( ii = 0; ii < ${#_positionals[@]}; ii++))
	do
		eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args

### END OF CODE GENERATED BY Argbash ###

$(ssh -o "StrictHostKeyChecking no" -i $_arg_pem -L 2222:$_arg_destination_ip:22 $_arg_tunnel_user@$_arg_tunnel_ip -N &)
ssh -o "StrictHostKeyChecking no" -p 2222 -i $_arg_pem $_arg_destination_user@localhost

kill $(ps aux | grep $_arg_tunnel_user@$_arg_tunnel_ip | grep -v grep | awk '{print $2}')
